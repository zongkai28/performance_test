// generated from rosidl_adapter/resource/msg.idl.em
// with input from performance_test/src/msg/PointCloud4m.msg
// generated code does not contain a copyright notice

#include "performance_test/msg/PointField.idl"
#include "performance_test/msg/Header.idl"

module performance_test {
  module msg {
    typedef performance_test::msg::PointField performance_test__msg__PointField;
    typedef performance_test__msg__PointField performance_test__msg__PointField__8[8];
    typedef uint8 uint8__4194304[4194304];
    @verbatim (language="comment", text=
      " This message holds a collection of N-dimensional points, which may" "\n"
      " contain additional information such as normals, intensity, etc. The" "\n"
      " point data is stored as a binary blob, its layout described by the" "\n"
      " contents of the \"fields\" array.")
    struct PointCloud4m {
      @verbatim (language="comment", text=
        " The point cloud data may be organized 2d (image-like) or 1d (unordered)." "\n"
        " Point clouds organized as 2d images may be produced by camera depth sensors" "\n"
        " such as stereo or time-of-flight." "\n"
        " Time of sensor data acquisition, and the coordinate frame ID (for 3d points).")
      performance_test::msg::Header header;

      @verbatim (language="comment", text=
        " 2D structure of the point cloud. If the cloud is unordered, height is" "\n"
        " 1 and width is the length of the point cloud.")
      uint32 height;

      uint32 width;

      @verbatim (language="comment", text=
        " Describes the channels and their layout in the binary data blob.")
      performance_test__msg__PointField__8 fields;

      @verbatim (language="comment", text=
        " Is this data bigendian?")
      boolean is_bigendian;

      @verbatim (language="comment", text=
        " Length of a point in bytes")
      uint32 point_step;

      @verbatim (language="comment", text=
        " Length of a row in bytes")
      uint32 row_step;

      @verbatim (language="comment", text=
        " Actual point data, size is (row_step*height)")
      uint8__4194304 data;

      @verbatim (language="comment", text=
        " True if there are no invalid points")
      boolean is_dense;

      @verbatim (language="comment", text=
        " Support data for the performance test")
      string<36> publisher_id;

      uint64 sequence_id;
    };
  };
};
